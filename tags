!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-prefix	contrib/build-deb/rules	/^	.\/configure --prefix=\/usr$/;"	m
ACCEPTABLE	libhttpd/protocol.c	686;"	d	file:
AUTH_ALLOWED	src/auth.h	/^    AUTH_ALLOWED = 1, \/**< Client was granted access by the auth server *\/$/;"	e	enum:__anon6
AUTH_DENIED	src/auth.h	/^    AUTH_DENIED = 0, \/**< Client was denied by the auth server *\/$/;"	e	enum:__anon6
AUTH_ERROR	src/auth.h	/^    AUTH_ERROR = -1, \/**< An error occured during the validation process*\/$/;"	e	enum:__anon6
AUTH_LOCKED	src/auth.h	/^    AUTH_LOCKED = 254 \/**< Account has been locked *\/$/;"	e	enum:__anon6
AUTH_VALIDATION	src/auth.h	/^    AUTH_VALIDATION = 5, \/**< A misnomer.  Client is in 15 min probation to validate his new account *\/$/;"	e	enum:__anon6
AUTH_VALIDATION_FAILED	src/auth.h	/^    AUTH_VALIDATION_FAILED = 6, \/**< Client had X minutes to validate account by email and didn't = too late *\/$/;"	e	enum:__anon6
DEC	libhttpd/protocol.c	216;"	d	file:
DEFAULT_AUTHSERVAUTHPATHFRAGMENT	src/conf.h	69;"	d
DEFAULT_AUTHSERVLOGINPATHFRAGMENT	src/conf.h	65;"	d
DEFAULT_AUTHSERVMSGPATHFRAGMENT	src/conf.h	67;"	d
DEFAULT_AUTHSERVPATH	src/conf.h	64;"	d
DEFAULT_AUTHSERVPINGPATHFRAGMENT	src/conf.h	68;"	d
DEFAULT_AUTHSERVPORT	src/conf.h	59;"	d
DEFAULT_AUTHSERVPORTALPATHFRAGMENT	src/conf.h	66;"	d
DEFAULT_AUTHSERVSSLAVAILABLE	src/conf.h	62;"	d
DEFAULT_AUTHSERVSSLPORT	src/conf.h	60;"	d
DEFAULT_CHECKINTERVAL	src/conf.h	54;"	d
DEFAULT_CLIENTTIMEOUT	src/conf.h	53;"	d
DEFAULT_CONFIGFILE	src/conf.h	41;"	d
DEFAULT_CONFIGFILE	src/conf.h	44;"	d
DEFAULT_DAEMON	src/conf.h	47;"	d
DEFAULT_DEBUGLEVEL	src/conf.h	48;"	d
DEFAULT_GATEWAYID	src/conf.h	50;"	d
DEFAULT_GATEWAYPORT	src/conf.h	51;"	d
DEFAULT_HTMLMSGFILE	src/conf.h	42;"	d
DEFAULT_HTMLMSGFILE	src/conf.h	45;"	d
DEFAULT_HTTPDMAXCONN	src/conf.h	49;"	d
DEFAULT_HTTPDNAME	src/conf.h	52;"	d
DEFAULT_INTERNAL_SOCK	src/conf.h	58;"	d
DEFAULT_LOG_SYSLOG	src/conf.h	55;"	d
DEFAULT_SOCK	src/wdctl.h	30;"	d
DEFAULT_SYSLOG_FACILITY	src/conf.h	56;"	d
DEFAULT_WDCTL_SOCK	src/conf.h	57;"	d
DEFAULT_WDCTL_SOCK	src/wdctl_thread.h	30;"	d
ERR	contrib/build-openwrt-whiterussianipk/wifidog/Makefile	/^	        ERR := $(Please set TOPDIR to OpenWRT SDK's buildroot)$/;"	m
EXT_INTERFACE_DETECT_RETRY_INTERVAL	src/conf.h	37;"	d
FW_ACCESS_ALLOW	src/fw_iptables.h	/^    FW_ACCESS_ALLOW,$/;"	e	enum:fw_access_t_
FW_ACCESS_DENY	src/fw_iptables.h	/^    FW_ACCESS_DENY$/;"	e	enum:fw_access_t_
FW_MARK_KNOWN	src/firewall.h	/^    FW_MARK_KNOWN = 2,  \/**< @brief The client is known to the firewall *\/ $/;"	e	enum:_t_fw_marks
FW_MARK_LOCKED	src/firewall.h	/^    FW_MARK_LOCKED = 254 \/**< @brief The client has been locked out *\/$/;"	e	enum:_t_fw_marks
FW_MARK_PROBATION	src/firewall.h	/^    FW_MARK_PROBATION = 1, \/**< @brief The client is in probation period and must be authenticated $/;"	e	enum:_t_fw_marks
GATEWAY_MESSAGE_ACCOUNT_LOGGED_OUT	src/centralserver.h	46;"	d
GATEWAY_MESSAGE_ACCOUNT_VALIDATION_FAILED	src/centralserver.h	44;"	d
GATEWAY_MESSAGE_ACTIVATE_ACCOUNT	src/centralserver.h	42;"	d
GATEWAY_MESSAGE_DENIED	src/centralserver.h	40;"	d
HTTP_ACL_DENY	libhttpd/httpd.h	91;"	d
HTTP_ACL_PERMIT	libhttpd/httpd.h	90;"	d
HTTP_ANY_ADDR	libhttpd/httpd.h	68;"	d
HTTP_C_FUNCT	libhttpd/httpd.h	77;"	d
HTTP_C_WILDCARD	libhttpd/httpd.h	81;"	d
HTTP_EMBER_FUNCT	libhttpd/httpd.h	78;"	d
HTTP_FALSE	libhttpd/httpd.h	74;"	d
HTTP_FILE	libhttpd/httpd.h	76;"	d
HTTP_GET	libhttpd/httpd.h	70;"	d
HTTP_IP_ADDR_LEN	libhttpd/httpd.h	65;"	d
HTTP_MAX_AUTH	libhttpd/httpd.h	64;"	d
HTTP_MAX_HEADERS	libhttpd/httpd.h	63;"	d
HTTP_MAX_LEN	libhttpd/httpd.h	61;"	d
HTTP_MAX_URL	libhttpd/httpd.h	62;"	d
HTTP_METHOD_ERROR	libhttpd/httpd.h	83;"	d
HTTP_PORT	libhttpd/httpd.h	60;"	d
HTTP_POST	libhttpd/httpd.h	71;"	d
HTTP_READ_BUF_LEN	libhttpd/httpd.h	67;"	d
HTTP_STATIC	libhttpd/httpd.h	79;"	d
HTTP_TIME_STRING_LEN	libhttpd/httpd.h	66;"	d
HTTP_TRUE	libhttpd/httpd.h	73;"	d
HTTP_WILDCARD	libhttpd/httpd.h	80;"	d
LEVEL_ERROR	libhttpd/httpd_priv.h	49;"	d
LEVEL_NOTICE	libhttpd/httpd_priv.h	48;"	d
LIBHTTPD_VENDOR	libhttpd/version.c	/^        LIBHTTPD_VENDOR[] =   "Hughes Technologies Pty Ltd";$/;"	v
LIBHTTPD_VERSION	libhttpd/version.c	/^char    LIBHTTPD_VERSION[] =  "1.3",$/;"	v
LIB_HTTPD_H	libhttpd/httpd.h	33;"	d
LIB_HTTPD_H_PRIV	libhttpd/httpd_priv.h	33;"	d
LOCK_CLIENT_LIST	src/client_list.h	82;"	d
LOCK_CONFIG	src/conf.h	196;"	d
LOCK_GHBN	src/util.h	65;"	d
MAX_BUF	src/common.h	31;"	d
MINIMUM_STARTED_TIME	src/ping_thread.h	30;"	d
NUM_EXT_INTERFACE_DETECT_RETRY	src/conf.h	34;"	d
OpCodes	src/conf.c	/^} OpCodes;$/;"	t	typeref:enum:__anon9	file:
PKG_BUILD_DIR	contrib/build-openwrt-whiterussianipk/wifidog/Makefile	/^PKG_BUILD_DIR:=$(BUILD_DIR)\/$(PKG_NAME)-$(PKG_VERSION)$/;"	m
PKG_CAT	contrib/build-openwrt-whiterussianipk/wifidog/Makefile	/^PKG_CAT:=zcat$/;"	m
PKG_FIXUP	contrib/airos/wifidog/Makefile	/^PKG_FIXUP = libtool$/;"	m
PKG_FIXUP	contrib/build-openwrt-kamikazeipk/wifidog/Makefile	/^PKG_FIXUP = libtool$/;"	m
PKG_FIXUP	contrib/build-openwrt-kamikazeipk8.09up/wifidog/Makefile	/^PKG_FIXUP = libtool$/;"	m
PKG_INSTALL_DIR	contrib/build-openwrt-whiterussianipk/wifidog/Makefile	/^PKG_INSTALL_DIR:=$(PKG_BUILD_DIR)\/ipkg-install$/;"	m
PKG_MD5SUM	contrib/airos/wifidog/Makefile	/^PKG_MD5SUM:=$/;"	m
PKG_MD5SUM	contrib/build-openwrt-kamikazeipk/wifidog/Makefile	/^PKG_MD5SUM:=$/;"	m
PKG_MD5SUM	contrib/build-openwrt-kamikazeipk8.09up/wifidog/Makefile	/^PKG_MD5SUM:=$/;"	m
PKG_MD5SUM	contrib/build-openwrt-whiterussianipk/wifidog/Makefile	/^PKG_MD5SUM:=$/;"	m
PKG_NAME	contrib/airos/wifidog/Makefile	/^PKG_NAME:=wifidog$/;"	m
PKG_NAME	contrib/build-openwrt-kamikazeipk/wifidog/Makefile	/^PKG_NAME:=wifidog$/;"	m
PKG_NAME	contrib/build-openwrt-kamikazeipk8.09up/wifidog/Makefile	/^PKG_NAME:=wifidog$/;"	m
PKG_NAME	contrib/build-openwrt-whiterussianipk/wifidog/Makefile	/^PKG_NAME:=wifidog$/;"	m
PKG_RELEASE	contrib/airos/wifidog/Makefile	/^PKG_RELEASE:=1$/;"	m
PKG_RELEASE	contrib/build-openwrt-kamikazeipk/wifidog/Makefile	/^PKG_RELEASE:=1$/;"	m
PKG_RELEASE	contrib/build-openwrt-kamikazeipk8.09up/wifidog/Makefile	/^PKG_RELEASE:=1$/;"	m
PKG_RELEASE	contrib/build-openwrt-whiterussianipk/wifidog/Makefile	/^PKG_RELEASE:=1$/;"	m
PKG_SOURCE	contrib/airos/wifidog/Makefile	/^PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz$/;"	m
PKG_SOURCE	contrib/build-openwrt-kamikazeipk/wifidog/Makefile	/^PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz$/;"	m
PKG_SOURCE	contrib/build-openwrt-kamikazeipk8.09up/wifidog/Makefile	/^PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz$/;"	m
PKG_SOURCE	contrib/build-openwrt-whiterussianipk/wifidog/Makefile	/^PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz$/;"	m
PKG_SOURCE_URL	contrib/airos/wifidog/Makefile	/^PKG_SOURCE_URL:= @SF\/$(PKG_NAME)$/;"	m
PKG_SOURCE_URL	contrib/build-openwrt-kamikazeipk/wifidog/Makefile	/^PKG_SOURCE_URL:= @SF\/$(PKG_NAME)$/;"	m
PKG_SOURCE_URL	contrib/build-openwrt-kamikazeipk8.09up/wifidog/Makefile	/^PKG_SOURCE_URL:= @SF\/$(PKG_NAME)$/;"	m
PKG_SOURCE_URL	contrib/build-openwrt-whiterussianipk/wifidog/Makefile	/^PKG_SOURCE_URL:= @SF\/$(PKG_NAME)$/;"	m
PKG_VERSION	contrib/airos/wifidog/Makefile	/^PKG_VERSION:=20090925$/;"	m
PKG_VERSION	contrib/build-openwrt-kamikazeipk/wifidog/Makefile	/^PKG_VERSION:=20090925$/;"	m
PKG_VERSION	contrib/build-openwrt-kamikazeipk8.09up/wifidog/Makefile	/^PKG_VERSION:=20090925$/;"	m
PKG_VERSION	contrib/build-openwrt-whiterussianipk/wifidog/Makefile	/^PKG_VERSION:=20090925$/;"	m
Package	contrib/airos/wifidog/Makefile	/^define Package\/wifidog$/;"	m
Package	contrib/airos/wifidog/Makefile	/^define Package\/wifidog\/conffiles$/;"	m
Package	contrib/airos/wifidog/Makefile	/^define Package\/wifidog\/description$/;"	m
Package	contrib/airos/wifidog/Makefile	/^define Package\/wifidog\/install$/;"	m
Package	contrib/airos/wifidog/Makefile	/^define Package\/wifidog\/postinst$/;"	m
Package	contrib/build-openwrt-kamikazeipk/wifidog/Makefile	/^define Package\/wifidog$/;"	m
Package	contrib/build-openwrt-kamikazeipk/wifidog/Makefile	/^define Package\/wifidog\/conffiles$/;"	m
Package	contrib/build-openwrt-kamikazeipk/wifidog/Makefile	/^define Package\/wifidog\/description$/;"	m
Package	contrib/build-openwrt-kamikazeipk/wifidog/Makefile	/^define Package\/wifidog\/install$/;"	m
Package	contrib/build-openwrt-kamikazeipk8.09up/wifidog/Makefile	/^define Package\/wifidog$/;"	m
Package	contrib/build-openwrt-kamikazeipk8.09up/wifidog/Makefile	/^define Package\/wifidog\/conffiles$/;"	m
Package	contrib/build-openwrt-kamikazeipk8.09up/wifidog/Makefile	/^define Package\/wifidog\/description$/;"	m
Package	contrib/build-openwrt-kamikazeipk8.09up/wifidog/Makefile	/^define Package\/wifidog\/install$/;"	m
REQUEST_TYPE_COUNTERS	src/centralserver.h	37;"	d
REQUEST_TYPE_LOGIN	src/centralserver.h	33;"	d
REQUEST_TYPE_LOGOUT	src/centralserver.h	35;"	d
STATUS_BUF_SIZ	src/util.h	30;"	d
TABLE_WIFIDOG_AUTHSERVERS	src/fw_iptables.h	38;"	d
TABLE_WIFIDOG_GLOBAL	src/fw_iptables.h	39;"	d
TABLE_WIFIDOG_INCOMING	src/fw_iptables.h	37;"	d
TABLE_WIFIDOG_KNOWN	src/fw_iptables.h	41;"	d
TABLE_WIFIDOG_LOCKED	src/fw_iptables.h	43;"	d
TABLE_WIFIDOG_OUTGOING	src/fw_iptables.h	34;"	d
TABLE_WIFIDOG_TRUSTED	src/fw_iptables.h	44;"	d
TABLE_WIFIDOG_UNKNOWN	src/fw_iptables.h	42;"	d
TABLE_WIFIDOG_VALIDATE	src/fw_iptables.h	40;"	d
TABLE_WIFIDOG_WIFI_TO_INTERNET	src/fw_iptables.h	35;"	d
TABLE_WIFIDOG_WIFI_TO_ROUTER	src/fw_iptables.h	36;"	d
TARGET_ACCEPT	src/conf.h	/^    TARGET_ACCEPT,$/;"	e	enum:__anon7
TARGET_DROP	src/conf.h	/^    TARGET_DROP,$/;"	e	enum:__anon7
TARGET_LOG	src/conf.h	/^    TARGET_LOG,$/;"	e	enum:__anon7
TARGET_REJECT	src/conf.h	/^    TARGET_REJECT,$/;"	e	enum:__anon7
TARGET_ULOG	src/conf.h	/^    TARGET_ULOG$/;"	e	enum:__anon7
TO_NEXT_WORD	src/conf.c	380;"	d	file:
UNLOCK_CLIENT_LIST	src/client_list.h	88;"	d
UNLOCK_CONFIG	src/conf.h	202;"	d
UNLOCK_GHBN	src/util.h	71;"	d
URL_XALPHAS	libhttpd/protocol.c	671;"	d	file:
URL_XPALPHAS	libhttpd/protocol.c	672;"	d	file:
WDCTL_KILL	src/wdctl.h	35;"	d
WDCTL_RESTART	src/wdctl.h	36;"	d
WDCTL_STATUS	src/wdctl.h	33;"	d
WDCTL_STOP	src/wdctl.h	34;"	d
WDCTL_UNDEF	src/wdctl.h	32;"	d
_AUTH_H_	src/auth.h	28;"	d
_CENTRALSERVER_H_	src/centralserver.h	28;"	d
_CLIENT_LIST_H_	src/client_list.h	28;"	d
_COMMANDLINE_H_	src/commandline.h	28;"	d
_COMMON_H_	src/common.h	28;"	d
_CONFIG_H_	src/conf.h	28;"	d
_DEBUG_H_	src/debug.h	28;"	d
_DECODE_MAXVAL	libhttpd/protocol.c	217;"	d	file:
_FIREWALL_H_	src/firewall.h	28;"	d
_FW_IPTABLES_H_	src/fw_iptables.h	28;"	d
_GATEWAY_H_	src/gateway.h	28;"	d
_GNU_SOURCE	src/auth.c	27;"	d	file:
_GNU_SOURCE	src/client_list.c	29;"	d	file:
_GNU_SOURCE	src/conf.c	28;"	d	file:
_GNU_SOURCE	src/firewall.c	31;"	d	file:
_GNU_SOURCE	src/fw_iptables.c	28;"	d	file:
_GNU_SOURCE	src/http.c	30;"	d	file:
_GNU_SOURCE	src/httpd_thread.c	28;"	d	file:
_GNU_SOURCE	src/ping_thread.c	29;"	d	file:
_GNU_SOURCE	src/util.c	31;"	d	file:
_GNU_SOURCE	src/wdctl.c	27;"	d	file:
_GNU_SOURCE	src/wdctl_thread.c	27;"	d	file:
_HTTPD_THREAD_H_	src/httpd_thread.h	28;"	d
_HTTP_H_	src/http.h	28;"	d
_PING_THREAD_H_	src/ping_thread.h	28;"	d
_SAFE_H_	src/safe.h	28;"	d
_UTIL_H_	src/util.h	28;"	d
_WDCTL_H_	src/wdctl.h	28;"	d
_WDCTL_THREAD_H_	src/wdctl_thread.h	28;"	d
__ANSI_PROTO	libhttpd/httpd.h	39;"	d
__ANSI_PROTO	libhttpd/httpd.h	41;"	d
__ANSI_PROTO	libhttpd/httpd_priv.h	37;"	d
__ANSI_PROTO	libhttpd/httpd_priv.h	39;"	d
_auth_serv_t	src/conf.h	/^typedef struct _auth_serv_t {$/;"	s
_client_list_free_node	src/client_list.c	/^_client_list_free_node(t_client * client)$/;"	f
_connect_auth_server	src/centralserver.c	/^int _connect_auth_server(int level) {$/;"	f
_debug	src/debug.c	/^_debug(const char *filename, int line, int level, const char *format, ...)$/;"	f
_firewall_rule_t	src/conf.h	/^typedef struct _firewall_rule_t {$/;"	s
_firewall_ruleset_t	src/conf.h	/^typedef struct _firewall_ruleset_t {$/;"	s
_httpd_404	libhttpd/httpd.h	/^typedef struct _httpd_404 {$/;"	s
_httpd_catFile	libhttpd/protocol.c	/^void _httpd_catFile(request *r, char *path)$/;"	f
_httpd_checkLastModified	libhttpd/protocol.c	/^int _httpd_checkLastModified(request *r, int modTime)$/;"	f
_httpd_content	libhttpd/httpd.h	/^typedef struct _httpd_content{$/;"	s
_httpd_decode	libhttpd/protocol.c	/^int _httpd_decode (bufcoded, bufplain, outbufsize)$/;"	f
_httpd_dir	libhttpd/httpd.h	/^typedef struct _httpd_dir{$/;"	s
_httpd_escape	libhttpd/protocol.c	/^char *_httpd_escape(str)$/;"	f
_httpd_findContentDir	libhttpd/protocol.c	/^httpDir *_httpd_findContentDir(server, dir, createFlag)$/;"	f
_httpd_findContentEntry	libhttpd/protocol.c	/^httpContent *_httpd_findContentEntry(request *r, httpDir *dir, char *entryName)$/;"	f
_httpd_formatTimeString	libhttpd/protocol.c	/^void _httpd_formatTimeString(char *ptr, int clock)$/;"	f
_httpd_freeVariables	libhttpd/protocol.c	/^void _httpd_freeVariables(var)$/;"	f
_httpd_from_hex	libhttpd/protocol.c	/^char _httpd_from_hex (c)$/;"	f
_httpd_net_read	libhttpd/protocol.c	/^int _httpd_net_read(sock, buf, len)$/;"	f
_httpd_net_write	libhttpd/protocol.c	/^int _httpd_net_write(sock, buf, len)$/;"	f
_httpd_readBuf	libhttpd/protocol.c	/^int _httpd_readBuf(request *r, char *destBuf, int len)$/;"	f
_httpd_readChar	libhttpd/protocol.c	/^int _httpd_readChar(request *r, char *cp)$/;"	f
_httpd_readLine	libhttpd/protocol.c	/^int _httpd_readLine(request *r, char *destBuf, int len)$/;"	f
_httpd_sanitiseUrl	libhttpd/protocol.c	/^void _httpd_sanitiseUrl(url)$/;"	f
_httpd_send304	libhttpd/protocol.c	/^void _httpd_send304(request *r)$/;"	f
_httpd_send403	libhttpd/protocol.c	/^void _httpd_send403(request *r)$/;"	f
_httpd_send404	libhttpd/protocol.c	/^void _httpd_send404(httpd *server, request *r)$/;"	f
_httpd_sendDirectoryEntry	libhttpd/protocol.c	/^int _httpd_sendDirectoryEntry(httpd *server, request *r, httpContent *entry,$/;"	f
_httpd_sendFile	libhttpd/protocol.c	/^void _httpd_sendFile(httpd *server, request *r, char *path)$/;"	f
_httpd_sendHeaders	libhttpd/protocol.c	/^void _httpd_sendHeaders(request *r, int contentLength, int modTime)$/;"	f
_httpd_sendStatic	libhttpd/protocol.c	/^void _httpd_sendStatic(httpd *server, request *r, char *data)$/;"	f
_httpd_sendText	libhttpd/protocol.c	/^void _httpd_sendText(request *r, char *msg)$/;"	f
_httpd_storeData	libhttpd/protocol.c	/^void _httpd_storeData(request *r, char *query)$/;"	f
_httpd_unescape	libhttpd/protocol.c	/^char * _httpd_unescape(str)$/;"	f
_httpd_var	libhttpd/httpd.h	/^typedef struct _httpd_var{$/;"	s
_httpd_writeAccessLog	libhttpd/protocol.c	/^void _httpd_writeAccessLog(httpd *server, request *r)$/;"	f
_httpd_writeErrorLog	libhttpd/protocol.c	/^void _httpd_writeErrorLog(httpd *server, request *r, char *level, char *message)$/;"	f
_isInCidrBlock	libhttpd/ip_acl.c	/^static int _isInCidrBlock(httpd *server, request *r, int addr1, int len1,$/;"	f	file:
_parse_firewall_rule	src/conf.c	/^_parse_firewall_rule(const char *ruleset, char *leftover)$/;"	f	file:
_t_authresponse	src/auth.h	/^typedef struct _t_authresponse {$/;"	s
_t_client	src/client_list.h	/^typedef struct	_t_client {$/;"	s
_t_counters	src/client_list.h	/^typedef struct _t_counters {$/;"	s
_t_fw_marks	src/firewall.h	/^typedef enum _t_fw_marks {$/;"	g
_trusted_mac_t	src/conf.h	/^typedef struct _trusted_mac_t {$/;"	s
accessLog	libhttpd/httpd.h	/^	FILE	*accessLog,$/;"	m	struct:__anon3
action	libhttpd/httpd.h	/^                action;$/;"	m	struct:ip_acl_s
addr	libhttpd/httpd.h	/^        int     addr;$/;"	m	struct:ip_acl_s
append_x_restartargv	src/gateway.c	/^void append_x_restartargv(void) {$/;"	f
arp_get	src/firewall.c	/^arp_get(const char *req_ip)$/;"	f
authLength	libhttpd/httpd.h	/^		authLength;$/;"	m	struct:__anon1
authPassword	libhttpd/httpd.h	/^	char	authPassword[HTTP_MAX_AUTH];$/;"	m	struct:__anon1
authUser	libhttpd/httpd.h	/^	char	authUser[HTTP_MAX_AUTH];$/;"	m	struct:__anon1
auth_server_request	src/centralserver.c	/^auth_server_request(t_authresponse *authresponse, const char *request_type, const char *ip, const char *mac, const char *token, unsigned long long int incoming, unsigned long long int outgoing)$/;"	f
auth_servers	src/conf.h	/^    t_auth_serv	*auth_servers;	\/**< @brief Auth servers list *\/$/;"	m	struct:__anon8
authcode	src/auth.h	/^    t_authcode authcode; \/**< Authentication code returned by the server *\/$/;"	m	struct:_t_authresponse
authenticate_client	src/auth.c	/^authenticate_client(request *r)$/;"	f
authserv_auth_script_path_fragment	src/conf.h	/^    char *authserv_auth_script_path_fragment;	\/**< @brief This is the script that talks the wifidog gateway protocol. *\/$/;"	m	struct:_auth_serv_t
authserv_hostname	src/conf.h	/^    char *authserv_hostname;	\/**< @brief Hostname of the central server *\/$/;"	m	struct:_auth_serv_t
authserv_http_port	src/conf.h	/^    int authserv_http_port;	\/**< @brief Http port the central server$/;"	m	struct:_auth_serv_t
authserv_login_script_path_fragment	src/conf.h	/^    char *authserv_login_script_path_fragment;	\/**< @brief This is the script the user will be sent to for login. *\/$/;"	m	struct:_auth_serv_t
authserv_msg_script_path_fragment	src/conf.h	/^    char *authserv_msg_script_path_fragment;	\/**< @brief This is the script the user will be sent to upon error to read a readable message. *\/$/;"	m	struct:_auth_serv_t
authserv_path	src/conf.h	/^    char *authserv_path;	\/**< @brief Path where wifidog resides *\/$/;"	m	struct:_auth_serv_t
authserv_ping_script_path_fragment	src/conf.h	/^    char *authserv_ping_script_path_fragment;	\/**< @brief This is the ping heartbeating script. *\/$/;"	m	struct:_auth_serv_t
authserv_portal_script_path_fragment	src/conf.h	/^    char *authserv_portal_script_path_fragment;	\/**< @brief This is the script the user will be sent to after a successfull login. *\/$/;"	m	struct:_auth_serv_t
authserv_ssl_port	src/conf.h	/^    int authserv_ssl_port;	\/**< @brief Https port the central server$/;"	m	struct:_auth_serv_t
authserv_use_ssl	src/conf.h	/^    int authserv_use_ssl;	\/**< @brief Use SSL or not *\/$/;"	m	struct:_auth_serv_t
checkinterval	src/conf.h	/^    int checkinterval;		\/**< @brief Frequency the the client timeout check$/;"	m	struct:__anon8
children	libhttpd/httpd.h	/^	struct	_httpd_dir *children,$/;"	m	struct:_httpd_dir	typeref:struct:_httpd_dir::_httpd_dir
clientAddr	libhttpd/httpd.h	/^		clientAddr[HTTP_IP_ADDR_LEN];$/;"	m	struct:__anon4
clientSock	libhttpd/httpd.h	/^	int	clientSock,$/;"	m	struct:__anon4
client_get_first_client	src/client_list.c	/^client_get_first_client(void)$/;"	f
client_list_append	src/client_list.c	/^client_list_append(const char *ip, const char *mac, const char *token)$/;"	f
client_list_delete	src/client_list.c	/^client_list_delete(t_client * client)$/;"	f
client_list_find	src/client_list.c	/^client_list_find(const char *ip, const char *mac)$/;"	f
client_list_find_by_ip	src/client_list.c	/^client_list_find_by_ip(const char *ip)$/;"	f
client_list_find_by_mac	src/client_list.c	/^client_list_find_by_mac(const char *mac)$/;"	f
client_list_find_by_token	src/client_list.c	/^client_list_find_by_token(const char *token)$/;"	f
client_list_init	src/client_list.c	/^client_list_init(void)$/;"	f
client_list_mutex	src/client_list.c	/^pthread_mutex_t client_list_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
clienttimeout	src/conf.h	/^    int clienttimeout;		\/**< @brief How many CheckIntervals before a client$/;"	m	struct:__anon8
command	src/wdctl.h	/^	int	command;$/;"	m	struct:__anon5
config	src/conf.c	/^static s_config config;$/;"	v	file:
config	src/wdctl.c	/^s_config config;$/;"	v
config_get_config	src/conf.c	/^config_get_config(void)$/;"	f
config_init	src/conf.c	/^config_init(void)$/;"	f
config_init_override	src/conf.c	/^config_init_override(void)$/;"	f
config_mutex	src/conf.c	/^pthread_mutex_t config_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
config_notnull	src/conf.c	/^config_notnull(const void *parm, const char *parmname)$/;"	f	file:
config_parse_token	src/conf.c	/^config_parse_token(const char *cp, const char *filename, int linenum)$/;"	f	file:
config_read	src/conf.c	/^config_read(const char *filename)$/;"	f
config_validate	src/conf.c	/^config_validate(void)$/;"	f
configfile	src/conf.h	/^    char configfile[255];	\/**< @brief name of the config file *\/$/;"	m	struct:__anon8
connect_auth_server	src/centralserver.c	/^int connect_auth_server() {$/;"	f
connect_to_server	src/wdctl.c	/^connect_to_server(const char *sock_name)$/;"	f	file:
content	libhttpd/httpd.h	/^	httpContent	*content;$/;"	m	struct:__anon2
content	libhttpd/httpd.h	/^	httpDir	*content;$/;"	m	struct:__anon3
contentLength	libhttpd/httpd.h	/^		contentLength,$/;"	m	struct:__anon1
contentType	libhttpd/httpd.h	/^			contentType[HTTP_MAX_URL];$/;"	m	struct:__anon2
contentType	libhttpd/httpd.h	/^		contentType[HTTP_MAX_URL],$/;"	m	struct:__anon1
counters	src/client_list.h	/^	t_counters	counters;	\/**< @brief Counters for input\/output of$/;"	m	struct:_t_client
daemon	src/conf.h	/^    int daemon;			\/**< @brief if daemon > 0, use daemon mode *\/$/;"	m	struct:__anon8
data	libhttpd/httpd.h	/^	char	*data,$/;"	m	struct:_httpd_content
debug	src/debug.h	33;"	d
debuglevel	src/conf.h	/^    int debuglevel;		\/**< @brief Debug information verbosity *\/$/;"	m	struct:__anon8
defaultAcl	libhttpd/httpd.h	/^	httpAcl	*defaultAcl;$/;"	m	struct:__anon3
entries	libhttpd/httpd.h	/^	struct	_httpd_content *entries;$/;"	m	struct:_httpd_dir	typeref:struct:_httpd_dir::_httpd_content
errorLog	libhttpd/httpd.h	/^		*errorLog;$/;"	m	struct:__anon3
execute	src/util.c	/^execute(const char *cmd_line, int quiet)$/;"	f
external_interface	src/conf.h	/^    char *external_interface;	\/**< @brief External network interface name for$/;"	m	struct:__anon8
fd	src/client_list.h	/^	int	fd;			\/**< @brief Client HTTP socket (valid only$/;"	m	struct:_t_client
fileBasePath	libhttpd/httpd.h	/^	char	fileBasePath[HTTP_MAX_URL],$/;"	m	struct:__anon3
firstclient	src/client_list.c	/^t_client         *firstclient = NULL;$/;"	v
firstclient	src/gateway.c	/^t_client *firstclient;$/;"	v
function	libhttpd/httpd.h	/^	void	(*function)();$/;"	m	struct:_httpd_404
function	libhttpd/httpd.h	/^	void	(*function)();$/;"	m	struct:_httpd_content
fw_access_t	src/fw_iptables.h	/^} fw_access_t;$/;"	t	typeref:enum:fw_access_t_
fw_access_t_	src/fw_iptables.h	/^typedef enum fw_access_t_ {$/;"	g
fw_allow	src/firewall.c	/^fw_allow(const char *ip, const char *mac, int fw_connection_state)$/;"	f
fw_clear_authservers	src/firewall.c	/^fw_clear_authservers(void)$/;"	f
fw_connection_state	src/client_list.h	/^	unsigned int fw_connection_state; \/**< @brief Connection state in the$/;"	m	struct:_t_client
fw_deny	src/firewall.c	/^fw_deny(const char *ip, const char *mac, int fw_connection_state)$/;"	f
fw_destroy	src/firewall.c	/^fw_destroy(void)$/;"	f
fw_init	src/firewall.c	/^fw_init(void)$/;"	f
fw_quiet	src/fw_iptables.c	/^static int fw_quiet = 0;$/;"	v	file:
fw_set_authservers	src/firewall.c	/^fw_set_authservers(void)$/;"	f
fw_sync_with_authserver	src/firewall.c	/^fw_sync_with_authserver(void)$/;"	f
get_auth_server	src/conf.c	/^get_auth_server(void)$/;"	f
get_clients_from_parent	src/gateway.c	/^void get_clients_from_parent(void) {$/;"	f
get_ext_iface	src/util.c	/^get_ext_iface(void)$/;"	f
get_iface_ip	src/util.c	/^get_iface_ip(const char *ifname)$/;"	f
get_iface_mac	src/util.c	/^get_iface_mac(const char *ifname)$/;"	f
get_ruleset	src/conf.c	/^get_ruleset(const char *ruleset)$/;"	f
get_status_text	src/util.c	/^	char * get_status_text() {$/;"	f
ghbn_mutex	src/util.c	/^static pthread_mutex_t ghbn_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
gw_address	src/conf.h	/^    char *gw_address;		\/**< @brief Internal IP address for our web$/;"	m	struct:__anon8
gw_id	src/conf.h	/^    char *gw_id;		\/**< @brief ID of the Gateway, sent to central$/;"	m	struct:__anon8
gw_interface	src/conf.h	/^    char *gw_interface;		\/**< @brief Interface we will accept connections on *\/$/;"	m	struct:__anon8
gw_port	src/conf.h	/^    int gw_port;		\/**< @brief Port the webserver will run on *\/$/;"	m	struct:__anon8
handle404	libhttpd/httpd.h	/^	http404  *handle404;$/;"	m	struct:__anon3
headers	libhttpd/httpd.h	/^			headers[HTTP_MAX_HEADERS],$/;"	m	struct:__anon2
headersSent	libhttpd/httpd.h	/^	char		headersSent,$/;"	m	struct:__anon2
hex	libhttpd/protocol.c	/^static char *hex = "0123456789ABCDEF";$/;"	v	file:
host	libhttpd/httpd.h	/^		*host;$/;"	m	struct:__anon3
host	libhttpd/httpd.h	/^	        host[HTTP_MAX_URL], \/* acv@acv.ca\/wifidog: Added decoding$/;"	m	struct:__anon1
htmlmsgfile	src/conf.h	/^    char *htmlmsgfile;		\/**< @brief name of the HTML file used for messages *\/$/;"	m	struct:__anon8
http404	libhttpd/httpd.h	/^} http404;$/;"	t	typeref:struct:_httpd_404
httpAcl	libhttpd/httpd.h	/^} httpAcl;$/;"	t	typeref:struct:ip_acl_s
httpContent	libhttpd/httpd.h	/^} httpContent;$/;"	t	typeref:struct:_httpd_content
httpDir	libhttpd/httpd.h	/^} httpDir;$/;"	t	typeref:struct:_httpd_dir
httpReq	libhttpd/httpd.h	/^} httpReq;$/;"	t	typeref:struct:__anon1
httpRes	libhttpd/httpd.h	/^} httpRes;$/;"	t	typeref:struct:__anon2
httpVar	libhttpd/httpd.h	/^} httpVar;$/;"	t	typeref:struct:_httpd_var
http_callback_404	src/http.c	/^http_callback_404(httpd *webserver, request *r)$/;"	f
http_callback_about	src/http.c	/^http_callback_about(httpd *webserver, request *r)$/;"	f
http_callback_auth	src/http.c	/^http_callback_auth(httpd *webserver, request *r)$/;"	f
http_callback_status	src/http.c	/^http_callback_status(httpd *webserver, request *r)$/;"	f
http_callback_wifidog	src/http.c	/^http_callback_wifidog(httpd *webserver, request *r)$/;"	f
http_send_redirect	src/http.c	/^void http_send_redirect(request *r, const char *url, const char *text)$/;"	f
http_send_redirect_to_auth	src/http.c	/^void http_send_redirect_to_auth(request *r, const char *urlFragment, const char *text)$/;"	f
httpd	libhttpd/httpd.h	/^} httpd;$/;"	t	typeref:struct:__anon3
httpdAddAcl	libhttpd/ip_acl.c	/^httpAcl *httpdAddAcl(server, acl, cidr, action)$/;"	f
httpdAddC404Content	libhttpd/api.c	/^int httpdAddC404Content(server, function)$/;"	f
httpdAddCContent	libhttpd/api.c	/^int httpdAddCContent(server, dir, name, indexFlag, preload, function)$/;"	f
httpdAddCWildcardContent	libhttpd/api.c	/^int httpdAddCWildcardContent(server, dir, preload, function)$/;"	f
httpdAddFileContent	libhttpd/api.c	/^int httpdAddFileContent(server, dir, name, indexFlag, preload, path)$/;"	f
httpdAddHeader	libhttpd/api.c	/^void httpdAddHeader(request *r, const char *msg)$/;"	f
httpdAddStaticContent	libhttpd/api.c	/^int httpdAddStaticContent(server, dir, name, indexFlag, preload, data)$/;"	f
httpdAddVariable	libhttpd/api.c	/^int httpdAddVariable(request *r, const char *name, const char *value)$/;"	f
httpdAddWildcardContent	libhttpd/api.c	/^int httpdAddWildcardContent(server, dir, preload, path)$/;"	f
httpdAuthenticate	libhttpd/api.c	/^void httpdAuthenticate(request *r, const char *realm)$/;"	f
httpdCheckAcl	libhttpd/ip_acl.c	/^int httpdCheckAcl(httpd *server, request *r, httpAcl *acl)$/;"	f
httpdCreate	libhttpd/api.c	/^httpd *httpdCreate(host, port)$/;"	f
httpdDestroy	libhttpd/api.c	/^void httpdDestroy(server)$/;"	f
httpdDumpVariables	libhttpd/api.c	/^void httpdDumpVariables(request *r)$/;"	f
httpdEndRequest	libhttpd/api.c	/^void httpdEndRequest(request *r)$/;"	f
httpdForceAuthenticate	libhttpd/api.c	/^void httpdForceAuthenticate(request *r, const char *realm)$/;"	f
httpdFreeVariables	libhttpd/api.c	/^void httpdFreeVariables(request *r)$/;"	f
httpdGetConnection	libhttpd/api.c	/^request *httpdGetConnection(server, timeout)$/;"	f
httpdGetNextVariableByPrefix	libhttpd/api.c	/^httpVar *httpdGetNextVariableByPrefix(curVar, prefix)$/;"	f
httpdGetVariableByName	libhttpd/api.c	/^httpVar *httpdGetVariableByName(request *r, const char *name)$/;"	f
httpdGetVariableByPrefix	libhttpd/api.c	/^httpVar *httpdGetVariableByPrefix(request *r, const char *prefix)$/;"	f
httpdGetVariableByPrefixedName	libhttpd/api.c	/^httpVar *httpdGetVariableByPrefixedName(request *r, const char *prefix, const char *name)$/;"	f
httpdOutput	libhttpd/api.c	/^void httpdOutput(request *r, const char *msg)$/;"	f
httpdPrintf	libhttpd/api.c	/^void httpdPrintf(request *r, const char *fmt, ...)$/;"	f
httpdProcessRequest	libhttpd/api.c	/^void httpdProcessRequest(httpd *server, request *r)$/;"	f
httpdReadRequest	libhttpd/api.c	/^int httpdReadRequest(httpd *server, request *r)$/;"	f
httpdRequestContentLength	libhttpd/httpd.h	88;"	d
httpdRequestContentType	libhttpd/httpd.h	87;"	d
httpdRequestMethod	libhttpd/httpd.h	85;"	d
httpdRequestMethodName	libhttpd/api.c	/^char *httpdRequestMethodName(request *r)$/;"	f
httpdRequestPath	libhttpd/httpd.h	86;"	d
httpdSendHeaders	libhttpd/api.c	/^void httpdSendHeaders(request *r)$/;"	f
httpdSetAccessLog	libhttpd/api.c	/^void httpdSetAccessLog(server, fp)$/;"	f
httpdSetContentType	libhttpd/api.c	/^void httpdSetContentType(request *r, const char *type)$/;"	f
httpdSetCookie	libhttpd/api.c	/^void httpdSetCookie(request *r, const char *name, const char *value)$/;"	f
httpdSetDefaultAcl	libhttpd/ip_acl.c	/^void httpdSetDefaultAcl(server, acl)$/;"	f
httpdSetErrorLog	libhttpd/api.c	/^void httpdSetErrorLog(server, fp)$/;"	f
httpdSetFileBase	libhttpd/api.c	/^void httpdSetFileBase(server, path)$/;"	f
httpdSetResponse	libhttpd/api.c	/^void httpdSetResponse(request *r, const char *msg)$/;"	f
httpdUrlEncode	libhttpd/api.c	/^char *httpdUrlEncode(str)$/;"	f
httpdmaxconn	src/conf.h	/^    int httpdmaxconn;		\/**< @brief Used by libhttpd, not sure what it$/;"	m	struct:__anon8
httpdname	src/conf.h	/^    char *httpdname;		\/**< @brief Name the web server will return when$/;"	m	struct:__anon8
httpdpassword	src/conf.h	/^    char *httpdpassword;	\/**< @brief Password for HTTP authentication *\/$/;"	m	struct:__anon8
httpdrealm	src/conf.h	/^    char *httpdrealm;		\/**< @brief HTTP Authentication realm *\/$/;"	m	struct:__anon8
httpdusername	src/conf.h	/^    char *httpdusername;	\/**< @brief Username for HTTP authentication *\/$/;"	m	struct:__anon8
icmp_fd	src/firewall.h	/^int icmp_fd;$/;"	v
icmp_ping	src/firewall.c	/^icmp_ping(const char *host)$/;"	f
ifModified	libhttpd/httpd.h	/^	        ifModified[HTTP_MAX_URL];$/;"	m	struct:__anon1
incoming	src/client_list.h	/^    unsigned long long	incoming;	\/**< @brief Incoming data total*\/$/;"	m	struct:_t_counters
incoming_history	src/client_list.h	/^    unsigned long long	incoming_history;	\/**< @brief Incoming data before wifidog restarted*\/$/;"	m	struct:_t_counters
indexFlag	libhttpd/httpd.h	/^		indexFlag;$/;"	m	struct:_httpd_content
init_config	src/wdctl.c	/^init_config(void)$/;"	f	file:
init_signals	src/gateway.c	/^init_signals(void)$/;"	f	file:
internal_sock	src/conf.h	/^    char *internal_sock;		\/**< @brief internal path to socket *\/$/;"	m	struct:__anon8
ip	src/client_list.h	/^	char	*ip;			\/**< @brief Client Ip address *\/$/;"	m	struct:_t_client
ip_acl_s	libhttpd/httpd.h	/^typedef struct ip_acl_s{$/;"	s
iptables_compile	src/fw_iptables.c	/^iptables_compile(const char * table, const char *chain, const t_firewall_rule *rule)$/;"	f	file:
iptables_do_command	src/fw_iptables.c	/^iptables_do_command(const char *format, ...)$/;"	f	file:
iptables_fw_access	src/fw_iptables.c	/^iptables_fw_access(fw_access_t type, const char *ip, const char *mac, int tag)$/;"	f
iptables_fw_clear_authservers	src/fw_iptables.c	/^iptables_fw_clear_authservers(void)$/;"	f
iptables_fw_counters_update	src/fw_iptables.c	/^iptables_fw_counters_update(void)$/;"	f
iptables_fw_destroy	src/fw_iptables.c	/^iptables_fw_destroy(void)$/;"	f
iptables_fw_destroy_mention	src/fw_iptables.c	/^iptables_fw_destroy_mention($/;"	f
iptables_fw_init	src/fw_iptables.c	/^iptables_fw_init(void)$/;"	f
iptables_fw_set_authservers	src/fw_iptables.c	/^iptables_fw_set_authservers(void)$/;"	f
iptables_insert_gateway_id	src/fw_iptables.c	/^iptables_insert_gateway_id(char **input)$/;"	f	file:
iptables_load_ruleset	src/fw_iptables.c	/^iptables_load_ruleset(const char * table, const char *ruleset, const char *chain)$/;"	f	file:
isAcceptable	libhttpd/protocol.c	/^static unsigned char isAcceptable[96] =$/;"	v	file:
is_auth_online	src/util.c	/^	int is_auth_online() {$/;"	f
is_online	src/util.c	/^	int is_online() {$/;"	f
keywords	src/conf.c	/^} keywords[] = {$/;"	v	typeref:struct:__anon10	file:
lastError	libhttpd/httpd.h	/^		lastError;$/;"	m	struct:__anon3
last_auth_offline_time	src/util.c	/^static time_t last_auth_offline_time = 0;$/;"	v	file:
last_auth_online_time	src/util.c	/^static time_t last_auth_online_time = 0;$/;"	v	file:
last_ip	src/conf.h	/^    char *last_ip;	\/**< @brief Last ip used by authserver *\/$/;"	m	struct:_auth_serv_t
last_offline_time	src/util.c	/^static time_t last_offline_time = 0;$/;"	v	file:
last_online_time	src/util.c	/^static time_t last_online_time = 0;$/;"	v	file:
last_updated	src/client_list.h	/^    time_t	last_updated;	\/**< @brief Last update of the counters *\/$/;"	m	struct:_t_counters
len	libhttpd/httpd.h	/^        char    len,$/;"	m	struct:ip_acl_s
log_syslog	src/conf.h	/^    int log_syslog;		\/**< @brief boolean, wether to log to syslog *\/$/;"	m	struct:__anon8
mac	src/client_list.h	/^	char	*mac;			\/**< @brief Client Mac address *\/$/;"	m	struct:_t_client
mac	src/conf.h	/^    char   *mac;$/;"	m	struct:_trusted_mac_t
main	src/gateway.c	/^int main(int argc, char **argv) {$/;"	f
main	src/wdctl.c	/^main(int argc, char **argv)$/;"	f
main_loop	src/gateway.c	/^main_loop(void)$/;"	f	file:
mark_auth_offline	src/util.c	/^	void mark_auth_offline() {$/;"	f
mark_auth_online	src/util.c	/^	void mark_auth_online() {$/;"	f
mark_auth_server_bad	src/conf.c	/^mark_auth_server_bad(t_auth_serv *bad_server)$/;"	f
mark_offline	src/util.c	/^	void mark_offline() {$/;"	f
mark_online	src/util.c	/^	void mark_online() {$/;"	f
mask	src/conf.h	/^    char *mask;			\/**< @brief Mask for the rule *destination* *\/$/;"	m	struct:_firewall_rule_t
method	libhttpd/httpd.h	/^	int	method,$/;"	m	struct:__anon1
missing_parms	src/conf.c	/^static int missing_parms;$/;"	v	file:
name	libhttpd/httpd.h	/^	char	*name,$/;"	m	struct:_httpd_var
name	libhttpd/httpd.h	/^	char	*name;$/;"	m	struct:_httpd_content
name	libhttpd/httpd.h	/^	char	*name;$/;"	m	struct:_httpd_dir
name	src/conf.c	/^	const char *name;$/;"	m	struct:__anon10	file:
name	src/conf.h	/^    char			*name;$/;"	m	struct:_firewall_ruleset_t
next	libhttpd/httpd.h	/^			*next;$/;"	m	struct:_httpd_dir	typeref:struct:_httpd_dir::
next	libhttpd/httpd.h	/^	struct	_httpd_content 	*next;$/;"	m	struct:_httpd_content	typeref:struct:_httpd_content::_httpd_content
next	libhttpd/httpd.h	/^        struct  ip_acl_s *next;$/;"	m	struct:ip_acl_s	typeref:struct:ip_acl_s::ip_acl_s
next	src/client_list.h	/^  struct	_t_client *next;        \/**< @brief Pointer to the next client *\/$/;"	m	struct:_t_client	typeref:struct:_t_client::_t_client
next	src/conf.h	/^    struct _auth_serv_t *next;$/;"	m	struct:_auth_serv_t	typeref:struct:_auth_serv_t::_auth_serv_t
next	src/conf.h	/^    struct _firewall_rule_t *next;$/;"	m	struct:_firewall_rule_t	typeref:struct:_firewall_rule_t::_firewall_rule_t
next	src/conf.h	/^    struct _firewall_ruleset_t	*next;$/;"	m	struct:_firewall_ruleset_t	typeref:struct:_firewall_ruleset_t::_firewall_ruleset_t
next	src/conf.h	/^    struct _trusted_mac_t *next;$/;"	m	struct:_trusted_mac_t	typeref:struct:_trusted_mac_t::_trusted_mac_t
nextValue	libhttpd/httpd.h	/^	struct	_httpd_var 	*nextValue,$/;"	m	struct:_httpd_var	typeref:struct:_httpd_var::_httpd_var
nextVariable	libhttpd/httpd.h	/^				*nextVariable;$/;"	m	struct:_httpd_var	typeref:struct:_httpd_var::
oAuthServAuthScriptPathFragment	src/conf.c	/^	oAuthServAuthScriptPathFragment,$/;"	e	enum:__anon9	file:
oAuthServHTTPPort	src/conf.c	/^	oAuthServHTTPPort,$/;"	e	enum:__anon9	file:
oAuthServHostname	src/conf.c	/^	oAuthServHostname,$/;"	e	enum:__anon9	file:
oAuthServLoginScriptPathFragment	src/conf.c	/^	oAuthServLoginScriptPathFragment,$/;"	e	enum:__anon9	file:
oAuthServMsgScriptPathFragment	src/conf.c	/^	oAuthServMsgScriptPathFragment,$/;"	e	enum:__anon9	file:
oAuthServPath	src/conf.c	/^	oAuthServPath,$/;"	e	enum:__anon9	file:
oAuthServPingScriptPathFragment	src/conf.c	/^	oAuthServPingScriptPathFragment,$/;"	e	enum:__anon9	file:
oAuthServPortalScriptPathFragment	src/conf.c	/^	oAuthServPortalScriptPathFragment,$/;"	e	enum:__anon9	file:
oAuthServSSLAvailable	src/conf.c	/^	oAuthServSSLAvailable,$/;"	e	enum:__anon9	file:
oAuthServSSLPort	src/conf.c	/^	oAuthServSSLPort,$/;"	e	enum:__anon9	file:
oAuthServer	src/conf.c	/^	oAuthServer,$/;"	e	enum:__anon9	file:
oBadOption	src/conf.c	/^	oBadOption,$/;"	e	enum:__anon9	file:
oCheckInterval	src/conf.c	/^	oCheckInterval,$/;"	e	enum:__anon9	file:
oClientTimeout	src/conf.c	/^	oClientTimeout,$/;"	e	enum:__anon9	file:
oDaemon	src/conf.c	/^	oDaemon,$/;"	e	enum:__anon9	file:
oDebugLevel	src/conf.c	/^	oDebugLevel,$/;"	e	enum:__anon9	file:
oExternalInterface	src/conf.c	/^	oExternalInterface,$/;"	e	enum:__anon9	file:
oFirewallRule	src/conf.c	/^	oFirewallRule,$/;"	e	enum:__anon9	file:
oFirewallRuleSet	src/conf.c	/^	oFirewallRuleSet,$/;"	e	enum:__anon9	file:
oGatewayAddress	src/conf.c	/^	oGatewayAddress,$/;"	e	enum:__anon9	file:
oGatewayID	src/conf.c	/^	oGatewayID,$/;"	e	enum:__anon9	file:
oGatewayInterface	src/conf.c	/^	oGatewayInterface,$/;"	e	enum:__anon9	file:
oGatewayPort	src/conf.c	/^	oGatewayPort,$/;"	e	enum:__anon9	file:
oHTTPDMaxConn	src/conf.c	/^	oHTTPDMaxConn,$/;"	e	enum:__anon9	file:
oHTTPDName	src/conf.c	/^	oHTTPDName,$/;"	e	enum:__anon9	file:
oHTTPDPassword	src/conf.c	/^        oHTTPDPassword,$/;"	e	enum:__anon9	file:
oHTTPDRealm	src/conf.c	/^	oHTTPDRealm,$/;"	e	enum:__anon9	file:
oHTTPDUsername	src/conf.c	/^        oHTTPDUsername,$/;"	e	enum:__anon9	file:
oHtmlMessageFile	src/conf.c	/^        oHtmlMessageFile,$/;"	e	enum:__anon9	file:
oProxyPort	src/conf.c	/^	oProxyPort,$/;"	e	enum:__anon9	file:
oSyslogFacility	src/conf.c	/^	oSyslogFacility,$/;"	e	enum:__anon9	file:
oTrustedMACList	src/conf.c	/^	oTrustedMACList,$/;"	e	enum:__anon9	file:
oWdctlSocket	src/conf.c	/^	oWdctlSocket,$/;"	e	enum:__anon9	file:
opcode	src/conf.c	/^	OpCodes opcode;$/;"	m	struct:__anon10	file:
outgoing	src/client_list.h	/^    unsigned long long	outgoing;	\/**< @brief Outgoing data total*\/$/;"	m	struct:_t_counters
outgoing_history	src/client_list.h	/^    unsigned long long	outgoing_history;	\/**< @brief Outgoing data before wifidog restarted*\/$/;"	m	struct:_t_counters
param	src/wdctl.h	/^	char	*param;$/;"	m	struct:__anon5
parse_auth_server	src/conf.c	/^parse_auth_server(FILE *file, const char *filename, int *linenum)$/;"	f	file:
parse_boolean_value	src/conf.c	/^parse_boolean_value(char *line)$/;"	f	file:
parse_commandline	src/commandline.c	/^void parse_commandline(int argc, char **argv) {$/;"	f
parse_commandline	src/wdctl.c	/^parse_commandline(int argc, char **argv)$/;"	f
parse_firewall_ruleset	src/conf.c	/^parse_firewall_ruleset(const char *ruleset, FILE *file, const char *filename, int *linenum)$/;"	f	file:
parse_trusted_mac_list	src/conf.c	/^void parse_trusted_mac_list(const char *ptr) {$/;"	f
path	libhttpd/httpd.h	/^		*path;$/;"	m	struct:_httpd_content
path	libhttpd/httpd.h	/^	char	path[HTTP_MAX_URL],$/;"	m	struct:__anon1
ping	src/ping_thread.c	/^ping(void)$/;"	f	file:
port	libhttpd/httpd.h	/^	int	port,$/;"	m	struct:__anon3
port	src/conf.h	/^    char *port;			\/**< @brief Port to block\/allow *\/$/;"	m	struct:_firewall_rule_t
preload	libhttpd/httpd.h	/^	int	(*preload)();$/;"	m	struct:_httpd_content
protocol	src/conf.h	/^    char *protocol;		\/**< @brief tcp, udp, etc ... *\/$/;"	m	struct:_firewall_rule_t
proxy_port	src/conf.h	/^    int proxy_port;		\/**< @brief Transparent proxy port (0 to disable) *\/$/;"	m	struct:__anon8
query	libhttpd/httpd.h	/^		query[HTTP_MAX_URL],$/;"	m	struct:__anon1
rand16	src/firewall.c	/^unsigned short rand16(void) {$/;"	f
readBuf	libhttpd/httpd.h	/^	char	readBuf[HTTP_READ_BUF_LEN + 1],$/;"	m	struct:__anon4
readBufPtr	libhttpd/httpd.h	/^		*readBufPtr,$/;"	m	struct:__anon4
readBufRemain	libhttpd/httpd.h	/^		readBufRemain;$/;"	m	struct:__anon4
referer	libhttpd/httpd.h	/^		referer[HTTP_MAX_URL],$/;"	m	struct:__anon1
request	libhttpd/httpd.h	/^	httpReq	request;$/;"	m	struct:__anon4
request	libhttpd/httpd.h	/^} request;$/;"	t	typeref:struct:__anon4
response	libhttpd/httpd.h	/^			response[HTTP_MAX_URL],$/;"	m	struct:__anon2
response	libhttpd/httpd.h	/^	httpRes response;$/;"	m	struct:__anon4
responseLength	libhttpd/httpd.h	/^	int		responseLength;$/;"	m	struct:__anon2
restart_orig_pid	src/commandline.c	/^pid_t restart_orig_pid = 0;$/;"	v
restartargv	src/commandline.c	/^char ** restartargv = NULL;$/;"	v
rules	src/conf.h	/^    t_firewall_rule		*rules;$/;"	m	struct:_firewall_ruleset_t
rulesets	src/conf.h	/^    t_firewall_ruleset	*rulesets;	\/**< @brief firewall rules *\/$/;"	m	struct:__anon8
s_config	src/conf.h	/^} s_config;$/;"	t	typeref:struct:__anon8
s_config	src/wdctl.h	/^} s_config;$/;"	t	typeref:struct:__anon5
safe_asprintf	src/safe.c	/^int safe_asprintf(char **strp, const char *fmt, ...) {$/;"	f
safe_fork	src/safe.c	/^pid_t safe_fork(void) {$/;"	f
safe_malloc	src/safe.c	/^void * safe_malloc (size_t size) {$/;"	f
safe_strdup	src/safe.c	/^char * safe_strdup(const char *s) {$/;"	f
safe_vasprintf	src/safe.c	/^int safe_vasprintf(char **strp, const char *fmt, va_list ap) {$/;"	f
scanCidr	libhttpd/ip_acl.c	/^static int scanCidr(val, result, length)$/;"	f	file:
send_http_page	src/http.c	/^void send_http_page(request *r, const char *title, const char* message)$/;"	f
send_request	src/wdctl.c	/^send_request(int sock, const char *request)$/;"	f	file:
served_this_session	src/util.c	/^long served_this_session = 0;$/;"	v
serverSock	libhttpd/httpd.h	/^		serverSock,$/;"	m	struct:__anon3
sigchld_handler	src/gateway.c	/^sigchld_handler(int s)$/;"	f
socket	src/wdctl.h	/^	char	*socket;$/;"	m	struct:__anon5
startTime	libhttpd/httpd.h	/^		startTime,$/;"	m	struct:__anon3
started_time	src/gateway.c	/^time_t started_time = 0;$/;"	v
syslog_facility	src/conf.h	/^    int syslog_facility;	\/**< @brief facility to use when using syslog for$/;"	m	struct:__anon8
t_auth_serv	src/conf.h	/^} t_auth_serv;$/;"	t	typeref:struct:_auth_serv_t
t_authcode	src/auth.h	/^} t_authcode;$/;"	t	typeref:enum:__anon6
t_authresponse	src/auth.h	/^} t_authresponse;$/;"	t	typeref:struct:_t_authresponse
t_client	src/client_list.h	/^} t_client;$/;"	t	typeref:struct:_t_client
t_counters	src/client_list.h	/^} t_counters;$/;"	t	typeref:struct:_t_counters
t_firewall_rule	src/conf.h	/^} t_firewall_rule;$/;"	t	typeref:struct:_firewall_rule_t
t_firewall_ruleset	src/conf.h	/^} t_firewall_ruleset;$/;"	t	typeref:struct:_firewall_ruleset_t
t_firewall_target	src/conf.h	/^} t_firewall_target;$/;"	t	typeref:enum:__anon7
t_fw_marks	src/firewall.h	/^} t_fw_marks;$/;"	t	typeref:enum:_t_fw_marks
t_trusted_mac	src/conf.h	/^} t_trusted_mac;$/;"	t	typeref:struct:_trusted_mac_t
target	src/conf.h	/^    t_firewall_target target;	\/**< @brief t_firewall_target *\/$/;"	m	struct:_firewall_rule_t
termination_handler	src/gateway.c	/^termination_handler(int s)$/;"	f
thread_client_timeout_check	src/auth.c	/^thread_client_timeout_check(const void *arg)$/;"	f
thread_httpd	src/httpd_thread.c	/^thread_httpd(void *args)$/;"	f
thread_ping	src/ping_thread.c	/^thread_ping(void *arg)$/;"	f
thread_wdctl	src/wdctl_thread.c	/^thread_wdctl(void *arg)$/;"	f
thread_wdctl_handler	src/wdctl_thread.c	/^thread_wdctl_handler(void *arg)$/;"	f	file:
tid_fw_counter	src/gateway.c	/^static pthread_t tid_fw_counter = 0;$/;"	v	file:
tid_ping	src/gateway.c	/^static pthread_t tid_ping = 0; $/;"	v	file:
token	src/client_list.h	/^	char	*token;			\/**< @brief Client token *\/$/;"	m	struct:_t_client
trustedmaclist	src/conf.h	/^    t_trusted_mac *trustedmaclist; \/**< @brief list of trusted macs *\/$/;"	m	struct:__anon8
type	libhttpd/httpd.h	/^	int	type,$/;"	m	struct:_httpd_content
usage	src/commandline.c	/^usage(void)$/;"	f	file:
usage	src/wdctl.c	/^usage(void)$/;"	f	file:
userAgent	libhttpd/httpd.h	/^		userAgent[HTTP_MAX_URL],$/;"	m	struct:__anon1
value	libhttpd/httpd.h	/^		*value;$/;"	m	struct:_httpd_var
variables	libhttpd/httpd.h	/^	httpVar	*variables;$/;"	m	struct:__anon4
wd_gethostbyname	src/util.c	/^wd_gethostbyname(const char *name)$/;"	f
wdctl_reset	src/wdctl.c	/^wdctl_reset(void)$/;"	f
wdctl_reset	src/wdctl_thread.c	/^wdctl_reset(int fd, const char *arg)$/;"	f	file:
wdctl_restart	src/wdctl.c	/^wdctl_restart(void)$/;"	f	file:
wdctl_restart	src/wdctl_thread.c	/^wdctl_restart(int afd)$/;"	f	file:
wdctl_sock	src/conf.h	/^    char *wdctl_sock;		\/**< @brief wdctl path to socket *\/$/;"	m	struct:__anon8
wdctl_socket_server	src/wdctl_thread.h	/^int wdctl_socket_server;$/;"	v
wdctl_status	src/wdctl.c	/^wdctl_status(void)$/;"	f	file:
wdctl_status	src/wdctl_thread.c	/^wdctl_status(int fd)$/;"	f	file:
wdctl_stop	src/wdctl.c	/^wdctl_stop(void)$/;"	f	file:
wdctl_stop	src/wdctl_thread.c	/^wdctl_stop(int fd)$/;"	f	file:
webserver	src/gateway.c	/^httpd * webserver = NULL;$/;"	v
